openapi: 3.0.1
info:
  title: Swagger Petstore
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.0.0

paths:

  /pet/findByStatus:
    get:
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              default: available
              enum:
                - available
                - pending
                - sold
      responses:
        '200':
          description: successful operation
          content:
            application/hal-form+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'                  
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
              x-example:
                  $ref: '#/components/examples/MyPet'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
                  
        '422':
          description: Invalid status value
          content: 
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Pet'
              example:
                $ref: '#/components/examples/MyPet2'
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'

components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          x-xxx: 'xxxxx'
          example: 'exxxxx'
        catname:
          type: string
        extern:
          $ref: './pet-common.yaml#/components/schemas/CommonCategory'
      xml:
        name: Category
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        tagname:
          type: string
          example: "MyTagName"
          x-mmmmexample: "MyTagName"
        subTags: 
          type: array
          items:
            type: string
            example: subCat
            x-schemaExample:
              $ref: '#/components/schemas/Category'
        subSubTags:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: subsubCat
                x-schemaExample:
                  $ref: '#/components/schemas/Category'
      

    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: number
          default: 12
          example: 11
        extCommonCat:
          $ref: './pet-common.yaml#/components/schemas/CommonCategory'          
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: Pet
  examples:
    MyPet:
      value:
        example_id: 1
        example_name: new object
      summary: A sample object
    MyPet2:
      value:
        example_id: 1
        example_name: new object
      summary: A sample object    